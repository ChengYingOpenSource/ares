silvery {
    akka {
      actor {
        provider = "cluster"
        serializers {
          java = "akka.serialization.JavaSerializer"
          proto = "akka.remote.serialization.ProtobufSerializer"
          mysezer = "com.cy.cuirass.cluster.MyOwnSerializer"
        }
        serialization-bindings {
          "java.lang.String" = java
          "com.cy.onepush.dcommon.event.MEvent" = mysezer
        }
      }
      remote {
        enabled-transports = ["akka.remote.netty.tcp"]
        log-remote-lifecycle-events = off
        netty.tcp {
          port = 25510
        }
      }
      cluster {
        seed-nodes = []
        retry-unsuccessful-join-after = 5s
        auto-down-unreachable-after = 60s
        
        # 联络种子节点的不成功尝试将会在超时（由属性seed-node-timeout配置）之后自动重试
        seed-node-timeout = 20s
      }
      # log-config-on-start = on
      # loglevel = "DEBUG"
      
    }
    akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension","akka.cluster.pubsub.DistributedPubSub"]
    akka.cluster.allow-weakly-up-members=on
    
    akka.cluster.use-dispatcher = cluster-dispatcher
    cluster-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 8
        parallelism-max = 32
      }
    }
    
    akka.cluster.pub-sub {
      # Actor name of the mediator actor, /system/distributedPubSubMediator
      name = distributedPubSubMediator
        
      # Start the mediator on members tagged with this role.
      # All members are used if undefined or empty.
      role = ""
    
      # The routing logic to use for 'Send'
      # Possible values: random, round-robin, broadcast
      routing-logic = round-robin
    
      # How often the DistributedPubSubMediator should send out gossip information
      gossip-interval = 2s
    
      # Removed entries are pruned after this duration
      removed-time-to-live = 60s
    
      # Maximum number of elements to transfer in one message when synchronizing the registries.
      # Next chunk will be transferred in next round of gossip.
      max-delta-elements = 3000
    
      # When a message is published to a topic with no subscribers send it to the dead letters.
      send-to-dead-letters-when-no-subscribers = on
      
      # The id of the dispatcher to use for DistributedPubSubMediator actors.
      # If not specified default dispatcher is used.
      # If specified you need to define the settings of the actual dispatcher.
      use-dispatcher = ""
    }
    
}
